config {
    type: "table",
    schema: "dataform_product",
    description: "attributes table will combine this table",
    tags: ["product"]
}

WITH
  -- Extract product_catalog's attributes(property)
  attributes_flatten AS (
  SELECT
    CAST(id AS STRING) AS id,
    COALESCE(JSON_EXTRACT(property, '$.guide_lang'), '') AS guide_lang,
    COALESCE(JSON_EXTRACT(property, '$.schedule_time.day'), '') AS schedule_day,
    COALESCE(JSON_EXTRACT(property, '$.schedule_time.hour'), '') AS schedule_hour,
    COALESCE(JSON_EXTRACT(property, '$.schedule_time.minute'), '') AS schedule_minutes,
    COALESCE(JSON_EXTRACT(property, '$.schedule_time.enable'), '') AS schedule_enable,
    COALESCE(JSON_EXTRACT(property, '$.voice_guide_lang'), '') AS voice_guide_lang,
  FROM
    ${ref('raw_product_catalog_*')} AS c
  WHERE
    _TABLE_SUFFIX = FORMAT_DATE('%Y%m%d', DATE_SUB(CURRENT_DATE("Asia/Taipei"), INTERVAL 1 DAY)) ),
  -- Wifi is unpivoted format so it cannot be joined with attributes directly
  -- this step will make wifi table pivoted, adding each value in feature.tag_type to a new column
  wifi_flatten AS (
  SELECT
    CAST(prod_mid AS STRING) AS id,
    COALESCE(MAX(CASE WHEN feature.tag_type = 'travel_day' THEN CAST(feature.arr AS STRING) END ), '') AS travel_day,
    COALESCE(MAX(CASE WHEN feature.tag_type = 'product_type' THEN CAST(feature.arr AS STRING) END ), '') AS product_type,
    COALESCE(MAX(CASE WHEN feature.tag_type = 'pickup_method' THEN CAST(feature.arr AS STRING) END ), '') AS pickup_method,
    COALESCE(MAX(CASE WHEN feature.tag_type = 'product_feature' THEN CAST(feature.arr AS STRING) END ), '') AS product_feature
  FROM
    ${ref('raw_wifi_*')}
  WHERE
    _TABLE_SUFFIX = FORMAT_DATE('%Y%m%d', DATE_SUB(CURRENT_DATE("Asia/Taipei"), INTERVAL 1 DAY))
  GROUP BY
    prod_mid ),
  -- Use left join to mapping attributes and wifi tables
  combined AS (
  SELECT
    a.id,
  IF
    ( LENGTH(SUBSTR(a.guide_lang, 2, LENGTH(a.guide_lang)-2)) = 0, "", SUBSTR(a.guide_lang, 2, LENGTH(a.guide_lang)-2) ) AS guide_lang,
    IFNULL(a.schedule_day, "") AS schedule_day,
    IFNULL(a.schedule_hour, "") AS schedule_hour,
    IFNULL(a.schedule_minutes, "") AS schedule_minutes,
    IFNULL(a.schedule_enable, "") AS schedule_enable,
  IF
    ( LENGTH(SUBSTR(a.voice_guide_lang, 2, LENGTH(a.voice_guide_lang)-2)) = 0, "", SUBSTR(a.voice_guide_lang, 2, LENGTH(a.voice_guide_lang)-2) ) AS voice_guide_lang,
    IFNULL(w.travel_day, "") AS travel_day,
    IFNULL(w.product_type, "") AS product_type,
    IFNULL(w.pickup_method, "") AS pickup_method,
    IFNULL(w.product_feature, "") AS product_feature,
  FROM
    attributes_flatten AS a
  LEFT JOIN
    wifi_flatten AS w
  ON
    a.id = w.id ),
  -- Aggregate all attributes into one column as a list
  array_list AS (
  SELECT
    CAST(id AS STRING) AS id,
    [ STRUCT("guide_lang" AS key,
      STRUCT([guide_lang] AS text) AS value),
    STRUCT("schedule_day" AS key, STRUCT([schedule_day] AS text) AS value),
    STRUCT("schedule_hour" AS key, STRUCT([schedule_hour] AS text) AS value),
    STRUCT("schedule_minutes" AS key, STRUCT([schedule_minutes] AS text) AS value),
    STRUCT("schedule_enable" AS key, STRUCT([schedule_enable] AS text) AS value),
    STRUCT("voice_guide_lang" AS key, STRUCT([voice_guide_lang] AS text) AS value),
    STRUCT("travel_day" AS key, STRUCT([travel_day] AS text) AS value),
    STRUCT("product_type" AS key, STRUCT([product_type] AS text) AS value),
    STRUCT("pickup_method" AS key, STRUCT([pickup_method] AS text) AS value),
    STRUCT("product_feature" AS key, STRUCT([product_feature] AS text) AS value) ] AS attributes
  FROM
    combined ),
  -- Remove elements that have no value in the list
  final AS (
  SELECT
    id,
    ARRAY(
    SELECT
      AS STRUCT attribute.key AS key, STRUCT(attribute.value.text AS text) AS value
    FROM
      UNNEST(array_list.attributes) AS attribute
    WHERE
      attribute.value.text[ORDINAL(1)] != "" ) AS attributes
  FROM
    array_list )
SELECT
  *
FROM
  final
